Amazon SDE technical challenge

Problem 1: 

Find distinct substrings with length num containing only 1 repeating character

// IMPORT LIBRARY PACKAGES NEEDED BY YOUR PROGRAM
// SOME CLASSES WITHIN A PACKAGE MAY BE RESTRICTED
import java.util.List;
import java.util.ArrayList;
import java.util.*;
// DEFINE ANY CLASS AND METHOD NEEDED
// CLASS BEGINS, THIS CLASS IS REQUIRED
public class Solution
{
    // METHOD SIGNATURE BEGINS, THIS METHOD IS REQUIRED
    public List<String> subStringsLessKDist(String inputString, int num)
  {
      Set<String> set = new HashSet<>();
      
        for (int i=0; i<inputString.length(); i++) {
            if (i + num > inputString.length()) { break; };
            String substring = inputString.substring(i, i + num);
            
            if (substring.chars().distinct().count() == num - 1) {
                set.add(substring);
            };
        }
        return new ArrayList<>(set);
    }
    // METHOD SIGNATURE ENDS
}

Problem 2:

There's a secret promtion happening where users need to add the same code to their cart in the same order. Write a function that lets the user know if they have all of the items.

https://leetcode.com/discuss/interview-question/762546/amazon-oa-2020-amazon-fresh-promotion

// IMPORT LIBRARY PACKAGES NEEDED BY YOUR PROGRAM
// SOME CLASSES WITHIN A PACKAGE MAY BE RESTRICTED
// DEFINE ANY CLASS AND METHOD NEEDED
import java.util.List;
// CLASS BEGINS, THIS CLASS IS REQUIRED
public class Solution
{
    // METHOD SIGNATURE BEGINS, THIS METHOD IS REQUIRED
    public int checkWinner(List<List<String>> codeList, 
                           List<String> shoppingCart)
  {
        // WRITE YOUR CODE HERE
        if (codeList == null || codeList.size() == 0) { 
            return 1; 
        }
        
        int currentGroupIdx = 0;
        int currentGroupItemIdx = 0;
        String currentItem = null;
        String item = null;

        for(int i=0; i<shoppingCart.size(); i++) {
            item = shoppingCart.get(i);
            currentItem = codeList.get(currentGroupIdx).get(currentGroupItemIdx);
            
            if (currentItem.equals("anything") || currentItem.equals(item)) {
                currentGroupItemIdx++;
            } else {
                currentGroupItemIdx = 0;
            }
            
            if (currentGroupItemIdx >= codeList.get(currentGroupIdx).size()) {
                currentGroupIdx++;
                currentGroupItemIdx = 0;
            }
            
            if (currentGroupIdx >= codeList.size()) {
                return 1;
            }
        }
        
        return 0;
    }
    // METHOD SIGNATURE ENDS
}